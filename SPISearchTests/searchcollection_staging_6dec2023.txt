# Captured Search Queries
{"p":[{"x":39,"s":"Easily scaffold a keychain using JWT for Vapor ‚õì","k":["jwt","keychain","server-side-swift","sikk","swift","user-management","vapor","vapor-2"],"id":{"r":"keychain","o":"nodes-vapor"}},{"s":"Swift Keychain utilities.","x":0,"id":{"o":"elegantchaos","r":"Keychain"},"k":["keychain","swift"]},{"x":31,"s":"Focused subset of Keychain Services in Swift.","k":[],"id":{"o":"AlaskaAirlines","r":"keychain"}},{"id":{"r":"ios-keychain","o":"IBM"},"s":"iOS Keychain Helper ","k":[],"x":3},{"id":{"o":"lipka","r":"Keychain"},"k":[],"x":0},{"s":"The easiest way to securely store data in the keychain. It's implementation is really close to the UserDefaults.","x":6,"k":["keychain","keychain-wrapper","spm","swift"],"id":{"r":"Keychain.swift","o":"groupeminaste"}},{"s":"Swift module for interacting with Keychain via property wrapper","k":["keychain","keychain-wrapper","swift"],"x":0,"id":{"r":"keychain","o":"tyhopp"}},{"k":["keychain","security","touch-id"],"s":"Simple Swift wrapper for Keychain that works on iOS, watchOS, tvOS and macOS.","x":7619,"id":{"r":"KeychainAccess","o":"kishikawakatsumi"}},{"s":"Helper functions for saving text in Keychain securely for iOS, OS X, tvOS and watchOS.","x":2577,"id":{"o":"evgenyneu","r":"keychain-swift"},"k":["ios","keychain","swift"]},{"s":"A simple Keychain wrapper for iOS, macOS, tvOS, and watchOS","x":502,"k":["dx-sdk","ios","keychain","security"],"id":{"r":"SimpleKeychain","o":"auth0"}},{"id":{"o":"square","r":"Valet"},"k":["crypto","face-id","ios","keychain","macos","security","touch-id","tvos","watchos"],"s":"Valet lets you securely store data in the iOS, tvOS, or macOS Keychain without knowing a thing about how the Keychain works. It‚Äôs easy. We promise.","x":3914},{"x":564,"s":"Prephirences is a Swift library that provides useful protocols and convenience methods to manage application preferences, configurations and app-state. UserDefaults","id":{"o":"phimage","r":"Prephirences"},"k":["configuration","ios","ios-swift","keychain","plist","preferences","property-wrapper","swift","userdefaults"]},{"id":{"o":"omaralbeik","r":"Stores"},"x":125,"s":"Typed key-value storage solution to store Codable types in various persistence layers with few lines of code!","k":["cache","codable","coredata","database","db","filesystem","identifiable","ios","keychain","keyvaluestore","macos","spm","store","swift","tvos","userdefaults","watchos"]},{"s":"Generate a certificate signing request (CSR) programmatically on iOS\/macOS\/watchOS\/tvOS devices","k":["certificate-signing-request","cocoapods","csr","elliptic-curve-diffie-hellman","elliptic-curves","ios","keychain","pki","privatekey","publickey","rsa","secure-enclave","swift","swift-package-manager"],"id":{"o":"cbaker6","r":"CertificateSigningRequest"},"x":91},{"s":"A simple wrapper for the iOS Keychain to allow you to use it in a similar fashion to User Defaults. Written in Swift.","x":1577,"id":{"r":"SwiftKeychainWrapper","o":"jrendel"},"k":[]},{"k":["dependency-injection","keychain","property-wrappers","singleton","swift","userdefaults"],"id":{"r":"SecurePropertyStorage","o":"alexruperez"},"s":"Helps you define secure storages for your properties using Swift property wrappers.","x":469},{"k":["ios","keychain","laravel","oauth","swift","swift-library"],"x":7,"s":"Swift library used for quick and easy authentication using Laravel passport.","id":{"o":"appoly","r":"PassportKit"}},{"s":"Accessing Keychain in Swift for my projects","id":{"o":"Machx","r":"SwiftyKeychain"},"x":0,"k":[]},{"k":["dynamicmemberlookup","hacktoberfest","keychain","keychain-access","keychain-wrapper","property-wrapper","propertywrapper","user-defaults","userdefaults"],"s":"Store anything anywhere with ease. Documentation:","id":{"r":"EFStorage","o":"EFPrefix"},"x":9},{"x":0,"k":["googleauthentication","keychainaccess","oauthswift"],"id":{"o":"Nef10","r":"GoogleAuthentication"},"s":"Swift wrapper around OAuthSwift and KeychainAccess to call Google APIs while saving the tokens into keychain"},{"k":["keychain","property-wrapper","swift","swift5-1"],"id":{"o":"futuredapp","r":"FTPropertyWrappers"},"x":8,"s":"Property wrappers for User Defaults, Keychain, StoredSubject and synchronization."},{"x":38,"s":"Keychain Item Property Wrapper","id":{"r":"keychain-item","o":"objcio"},"k":[]},{"x":7,"k":["keychain","keychain-wrapper","password","security","swift"],"s":"A Swifty database interface into the Keychain Services.","id":{"o":"brightdigit","r":"StealthyStash"}},{"id":{"r":"KeychainStore","o":"JuanjoArreola"},"x":6,"k":["keychain","swift"],"s":"Swift 5 Framework to access the Keychain in iOS"},{"x":4,"k":["keychain","property-wrapper","swift","userdefaults"],"id":{"o":"FelixHerrmann","r":"FHPropertyWrappers"},"s":"Some useful Swift Property Wrappers."},{"s":"A lightweight framework to persist iOS properties written in Swift","id":{"o":"danielepantaleone","r":"PersistedProperty"},"k":["keychain","persistable","persistence","properties","property-wrapper","storage","user-defaults"],"x":2},{"id":{"r":"SwiftKeychain","o":"ShenghaiWang"},"x":2,"s":"A Keychain wrapper allowing safe interaction with Keychain using strongly typed values and even in Swift concurrency fashion.","k":[]},{"id":{"r":"TIMEncryptedStorage-iOS","o":"trifork"},"k":["aes","biometrics","decryption","encryption","keychain","trifork-identity-manager"],"x":2,"s":"iOS framework for KeyService feature of Trifork Identity Manager. The purpose of this framework is to encrypt and decrypt data based on a user provided secret or with biometrics. The framework exchanges secrets for encryption keys in safe way and stores encrypted data in the Keychain."},{"id":{"o":"jamf","r":"Haversack"},"s":"A Swift library for keychain access on Apple devices","k":["ios","keychain","macos","swift","tvos","watchos"],"x":1},{"id":{"r":"key-vine","o":"ptsochantaris"},"x":0,"k":["ios","keychain","macos","swift","watchos"],"s":"A Keychain access wrapper in Swift, because the world needs more of these"},{"s":"Use the \"property wrapper\" to make an enhanced version of Keychain, so that Keychain can be as convenient as UserDefaults.","k":[],"x":0,"id":{"r":"WWKeychain","o":"William-Weng"}},{"k":["analytics","caching","clients","functional-programming","idfa","interfaces","ios","keychain","macos","managers","notifications","protocol-witnesses","swift","tvos","userdefaults","watchos"],"id":{"r":"swift-standard-clients","o":"CaptureContext"},"x":37,"s":"Client declarations and live implementations for standard iOS managers"},{"x":3,"id":{"o":"danielctull","r":"KeychainItem"},"k":["keychain","swift","swift-package-manager"]},{"id":{"r":"swift-composable-keychain","o":"binaryscraping"},"k":["composable-architecture","keychain","swift","tca"],"s":"A composable keychain wrapper around https:\/\/github.com\/kishikawakatsumi\/KeychainAccess","x":3},{"s":"A modern wrapper for iOS, macOS, tvOS and watchOS Keychain.","k":[],"id":{"r":"Swiftchain","o":"sbertix"},"x":2},{"s":"XCFramework version of KeychainAccess (https:\/\/github.com\/kishikawakatsumi\/KeychainAccess)","id":{"r":"Mappy-KeychainAccess","o":"beMappy"},"x":0,"k":[]}],"t":"2023-12-06T20:27:33Z","k":["keychain-wrapper","keychain-access","keychain","keychainaccess"],"q":"keychain","a":[]}
{"a":[],"q":"bezier","t":"2023-12-06T20:27:38Z","p":[{"s":"üìΩ Highly Optimized Graphics Math (glm) for C","k":["3d","3d-math","affine-transform-matrices","avx","bezier","bounding-boxes","c","euler","frustum","marix-inverse","math","matrix","matrix-decompositions","neon","opengl","opengl-math","simd","sse","vector","wasm"],"id":{"r":"cglm","o":"recp"},"x":1898},{"k":["animations","arrow","bezier-path","core-graphics","indicator","panels","sliding-menu","ux"],"id":{"r":"Arrows","o":"antoniocasero"},"s":"Arrows is an animated custom view to give feedback about your UI sliding panels.","x":335},{"x":49,"s":"Create animations over Bezier curves of any number of points","id":{"r":"SceneKit-Bezier-Animations","o":"maxxfrazer"},"k":["arkit","bezier","bezier-animation","bezier-curve","cocoapod","cocoapods","scenekit","scenekit-framework","swift","swift-package-manager","swiftpm"]},{"s":"Simple iOS view that draws a line with an arrow at the end. Uses UIBezierPath for a nice wavy effect.","id":{"r":"ArrowView","o":"bradhowes"},"x":5,"k":["arrow","bezier-path","ios","swift-pm","uibezierpath","uiview"]},{"x":1615,"s":"Easily convert your SVG files into CGPaths, CAShapeLayers, and UIBezierPaths ","id":{"o":"pocketsvg","r":"PocketSVG"},"k":["cocoapods","ios","macos","objective-c","svg","svg-files","swift"]},{"s":"ClippingBezier calculates intersection points, paths, and shapes between two UIBezierPaths","x":238,"k":[],"id":{"r":"ClippingBezier","o":"adamwulf"}},{"x":356,"s":"A small library to dramatically speed up common operations on UIBezierPath, and also bring its functionality closer to NSBezierPath","id":{"o":"adamwulf","r":"PerformanceBezier"},"k":[]},{"x":2,"s":"A view in the form of a popup balloon. UIBezierPath initializer included!","id":{"r":"BalloonView","o":"AndreasVerhoeven"},"k":[]}],"k":["bezier-animation","uibezierpath","bezier-path","bezier-curve","bezier"]}
{"k":["gauss-krueger"],"t":"2023-12-06T20:27:44Z","p":[{"s":"üåê Convert GK4 coordinates to WGS84, and vice versa","id":{"o":"kiliankoe","r":"gausskrueger"},"x":4,"k":["coordinates","gauss-krueger","wgs84"]}],"q":"gauss-krueger","a":[]}
{"t":"2023-12-06T20:27:49Z","q":"wtv","k":["wtv"],"a":[],"p":[{"id":{"o":"0xLet","r":"WTV"},"k":["mirror","reflection","swift","wtv"],"x":3,"s":"üëÄ  Where's The Variable?"},{"x":3,"k":["any","dataobject","json","object","surl","swift","wtv"],"id":{"o":"0xLet","r":"DataObject"},"s":"üì¶  DataObject(Any)"},{"id":{"o":"skelpo","r":"JWTVapor"},"s":"An integration between the Vapor and vapor\/jwt packages","k":["jwt","vapor","vapor-provider"],"x":2}]}
{"a":[],"k":["iso639-1"],"p":[{"s":"ISO639 languages for swift ","id":{"o":"SwiftPackageRepository","r":"ISO639.swift"},"x":1,"k":["iso639","iso639-1","iso639-2","language","languages","swift","swift-library","swift-package-manager","swift5"]}],"q":"iso639-1","t":"2023-12-06T20:27:54Z"}
{"p":[{"id":{"o":"ljcoder2015","r":"LJTool"},"k":[],"x":9,"s":"ÂºÄÂèë‰∏≠Â∏∏Áî®ÁöÑÂ∑•ÂÖ∑ÊñπÊ≥ï"}],"k":[],"t":"2023-12-06T20:28:00Z","q":"ÂÖ∑ÊñπÊ≥ï","a":[]}
{"t":"2023-12-06T20:28:05Z","a":[],"k":[],"q":"‰Ωú‰∏∫ÂºπÂπï","p":[{"k":["bilibili","bilibili-ass","cli","danmaku","macos","srt-bilibili","swift","swift-package-manager","swift4","ubuntu1404","ubuntu1604","ubuntu1610","windows-10","windows10"],"x":8,"s":"ÊääÂ≠óÂπïÊñá‰ª∂‰Ωú‰∏∫ÂºπÂπïÂèëÂà∞BÁ´ô;A swift solution for uploading SubRip file as danmaku to Bilibili","id":{"o":"ApolloZhu","r":"Srt2BilibiliKit"}}]}
{"q":"crdt","a":["y-crdt"],"k":["crdts","crdt-implementations","crdt"],"t":"2023-12-06T20:28:11Z","p":[{"x":121,"k":["crdt","crdt-implementations","crdts","swift"],"id":{"o":"heckj","r":"CRDT"},"s":"Conflict-free Replicated Data Types in Swift"},{"s":"Convergent and Commutative Replicated Data Types implementation in Swift","x":25,"k":["crdt","crdt-implementations","crdts","lseq","swift"],"id":{"o":"bluk","r":"CRDT"}},{"s":"Swift language bindings presenting Automerge","x":152,"id":{"o":"automerge","r":"automerge-swift"},"k":["automerge","crdt","crdt-implementations","crdts","swift"]},{"x":13,"k":["crdt","hacktoberfest","ios","realtime-collaboration","swift","yorkie"],"s":"Yorkie iOS SDK","id":{"o":"yorkie-team","r":"yorkie-ios-sdk"}},{"k":["crdt","rust","swift","yjs"],"id":{"o":"y-crdt","r":"yswift"},"x":49,"s":"Swift language bindings to Y-CRDT"},{"x":91,"id":{"o":"appdecentral","r":"replicatingtypes"},"k":[],"s":"Code for the tutorial series on Conflict-Free Replicated Data Types (CRDTs) at appdecentral.com"}]}
